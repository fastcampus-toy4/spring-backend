name: Deploy Spring Boot to Server

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" \
               | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push $IMAGE_NAME

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Docker Hub 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" \
              | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # 기존 컨테이너 강제 삭제(포트 해제)
            sudo docker rm -f spring-container || true

            # 최신 이미지 가져오기
            sudo docker pull ${{ env.IMAGE_NAME }}

            # 새 컨테이너 실행
            sudo docker run -d \
              --name spring-container \
              -p 8080:8080 \
              ${{ env.IMAGE_NAME }}
